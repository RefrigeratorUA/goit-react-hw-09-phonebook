{"version":3,"sources":["components/Notification/Notification.js","components/LoginForm/LoginForm.js","views/LoginView.js"],"names":["Notification","state","errorMessage","this","props","onView","message","setState","setTimeout","prevProps","prevState","className","Component","LoginForm","email","password","handleChange","event","target","name","value","handleSubmit","preventDefault","onLogin","showNotification","CSSTransition","in","classNames","timeout","unmountOnExit","onSubmit","type","onChange","disabled","mapDispatchToProps","authOperations","login","connect","LoginView"],"mappings":"oOA2BeA,E,4MAxBbC,MAAQ,CACNC,aAAc,I,uDAGhB,WAAqB,IAAD,EACUC,KAAKC,MAAzBC,EADU,EACVA,OAAQC,EADE,EACFA,QAChBH,KAAKI,SAAS,CAAEL,aAAcI,IAC9BE,YAAW,kBAAMH,EAAO,MAAK,O,gCAE/B,SAAmBI,EAAWC,GAAY,IAAD,EACXP,KAAKC,MAAzBC,EAD+B,EAC/BA,OAAQC,EADuB,EACvBA,QACRJ,EAAiBC,KAAKF,MAAtBC,aACR,GAAII,GAAWA,IAAYJ,EAEzB,OADAC,KAAKI,SAAS,CAAEL,aAAcI,IACvBD,EAAO,M,oBAIlB,WAAU,IACAH,EAAiBC,KAAKF,MAAtBC,aACR,OAAO,qBAAKS,UAAU,QAAf,SAAwBT,Q,GArBRU,c,kKCKrBC,E,4MACJZ,MAAQ,CACNa,MAAO,GACPC,SAAU,GACVb,aAAc,I,EAGhBc,aAAe,SAAAC,GAAU,IAAD,EACEA,EAAMC,OAAtBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACd,EAAKb,SAAL,eAAiBY,EAAOC,K,EAG1BC,aAAe,SAAAJ,GACbA,EAAMK,iBADgB,MAEM,EAAKrB,MAAzBa,EAFc,EAEdA,MAAOC,EAFO,EAEPA,SACPQ,EAAY,EAAKnB,MAAjBmB,QAER,OAAKT,EACAC,GAELQ,EAAQ,CAAET,QAAOC,kBACjB,EAAKR,SAAS,CAAEO,MAAO,GAAIC,SAAU,MAHf,EAAKS,iBAAiB,yBADzB,EAAKA,iBAAiB,uB,EAO3CA,iBAAmB,SAAAtB,GACjB,EAAKK,SAAS,CAAEL,kB,4CAGlB,WAAU,IAAD,EACmCC,KAAKF,MAAvCa,EADD,EACCA,MAAOC,EADR,EACQA,SAAUb,EADlB,EACkBA,aACzB,OACE,qCACE,qBAAKS,UAAU,uBAAf,SACE,cAACc,EAAA,EAAD,CAAeC,KAAMxB,EAAcyB,WAAW,eAAeC,QAAS,IAAKC,eAAa,EAAxF,SACE,cAAC7B,EAAA,EAAD,CAAcK,OAAQF,KAAKqB,iBAAkBlB,QAASJ,QAI1D,uBAAM4B,SAAU3B,KAAKkB,aAArB,UACE,0CAEE,uBACEV,UAAU,QACVoB,KAAK,QACLZ,KAAK,QACLC,MAAON,EACPkB,SAAU7B,KAAKa,kBAGnB,6CAEE,uBACEL,UAAU,QACVoB,KAAK,WACLZ,KAAK,WACLC,MAAOL,EACPiB,SAAU7B,KAAKa,kBAGnB,uBACA,wBACEL,UAAU,gBACVoB,KAAK,SACLE,UAAYnB,IAAUC,KAAeb,EAHvC,6B,GA5DcU,aAyElBsB,EAAqB,CACzBX,QAASY,IAAeC,OAGXC,cAAQ,KAAMH,EAAdG,CAAkCxB,GCzElCyB,UATG,WAChB,OACE,qCACE,uCACA,cAAC,EAAD","file":"static/js/login-view.5b84e384.chunk.js","sourcesContent":["import { Component } from 'react';\n\nclass Notification extends Component {\n  state = {\n    errorMessage: '',\n  };\n\n  componentDidMount() {\n    const { onView, message } = this.props;\n    this.setState({ errorMessage: message });\n    setTimeout(() => onView(''), 2000);\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const { onView, message } = this.props;\n    const { errorMessage } = this.state;\n    if (message && message !== errorMessage) {\n      this.setState({ errorMessage: message });\n      return onView('');\n    }\n  }\n\n  render() {\n    const { errorMessage } = this.state;\n    return <div className=\"alert\">{errorMessage}</div>;\n  }\n}\n\nexport default Notification;\n","import { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport Notification from '../Notification';\nimport '../Notification/Notification.css';\nimport { authOperations } from '../../redux/auth';\n\nclass LoginForm extends Component {\n  state = {\n    email: '',\n    password: '',\n    errorMessage: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { email, password } = this.state;\n    const { onLogin } = this.props;\n\n    if (!email) return this.showNotification('Please enter email');\n    if (!password) return this.showNotification('Please enter password');\n\n    onLogin({ email, password });\n    this.setState({ email: '', password: '' });\n  };\n\n  showNotification = errorMessage => {\n    this.setState({ errorMessage });\n  };\n\n  render() {\n    const { email, password, errorMessage } = this.state;\n    return (\n      <>\n        <div className=\"Notification-wrapper\">\n          <CSSTransition in={!!errorMessage} classNames=\"Notification\" timeout={250} unmountOnExit>\n            <Notification onView={this.showNotification} message={errorMessage} />\n          </CSSTransition>\n        </div>\n\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            Email\n            <input\n              className=\"input\"\n              type=\"email\"\n              name=\"email\"\n              value={email}\n              onChange={this.handleChange}\n            ></input>\n          </label>\n          <label>\n            Password\n            <input\n              className=\"input\"\n              type=\"password\"\n              name=\"password\"\n              value={password}\n              onChange={this.handleChange}\n            ></input>\n          </label>\n          <br />\n          <button\n            className=\"btn-phonebook\"\n            type=\"submit\"\n            disabled={(!email && !password) || !!errorMessage}\n          >\n            Login\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onLogin: authOperations.login,\n};\n\nexport default connect(null, mapDispatchToProps)(LoginForm);\n","import LoginForm from '../components/LoginForm';\n\nconst LoginView = () => {\n  return (\n    <>\n      <h1>Login</h1>\n      <LoginForm />\n    </>\n  );\n};\n\nexport default LoginView;\n"],"sourceRoot":""}